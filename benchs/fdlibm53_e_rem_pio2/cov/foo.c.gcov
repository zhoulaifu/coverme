        -:    0:Source:foo.c
        -:    0:Graph:foo.gcno
        -:    0:Data:foo.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:/* @(#)s_modf.c 1.3 95/01/18 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    8: * Permission to use, copy, modify, and distribute this
        -:    9: * software is freely granted, provided that this notice 
        -:   10: * is preserved.
        -:   11: * ====================================================
        -:   12: */
        -:   13:
        -:   14:/*
        -:   15: * modf(double x, double *iptr) 
        -:   16: * return fraction part of x, and return x's integral part in *iptr.
        -:   17: * Method:
        -:   18: *	Bit twiddling.
        -:   19: *
        -:   20: * Exception:
        -:   21: *	No exception.
        -:   22: */
        -:   23:
        -:   24:#include "fdlibm.h"
        -:   25:
        -:   26:#ifdef __STDC__
        -:   27:static const double one = 1.0;
        -:   28:#else
        -:   29:static double one = 1.0;
        -:   30:#endif
        -:   31:
        -:   32:#ifdef __STDC__
function foo_raw called 24932325 returned 100% blocks executed 33%
 24932325:   33:	double foo_raw(double x, double *iptr)
        -:   34:#else
        -:   35:	double foo_raw(x, iptr)
        -:   36:	double x,*iptr;
        -:   37:#endif
        -:   38:{
        -:   39:	int i0,i1,j0;
        -:   40:	unsigned i;
 24932325:   41:	i0 =  __HI(x);		/* high x */
 24932325:   42:	i1 =  __LO(x);		/* low  x */
 24932325:   43:	j0 = ((i0>>20)&0x7ff)-0x3ff;	/* exponent of x */
 24932325:   44:	if(j0<20) {			/* integer part in high x */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   45:	    if(j0<0) {			/* |x|<1 */
branch  0 never executed
branch  1 never executed
    #####:   46:		__HIp(iptr) = i0&0x80000000;
    #####:   47:		__LOp(iptr) = 0;		/* *iptr = +-0 */
    #####:   48:		return x;
        -:   49:	    } else {
    #####:   50:		i = (0x000fffff)>>j0;
    #####:   51:		if(((i0&i)|i1)==0) {		/* x is integral */
branch  0 never executed
branch  1 never executed
    #####:   52:		    *iptr = x;
    #####:   53:		    __HI(x) &= 0x80000000;
    #####:   54:		    __LO(x)  = 0;	/* return +-0 */
    #####:   55:		    return x;
        -:   56:		} else {
    #####:   57:		    __HIp(iptr) = i0&(~i);
    #####:   58:		    __LOp(iptr) = 0;
    #####:   59:		    return x - *iptr;
        -:   60:		}
        -:   61:	    }
 24932325:   62:	} else if (j0>51) {		/* no fraction part */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
 24932325:   63:	    *iptr = x*one;
 24932325:   64:	    __HI(x) &= 0x80000000;
 24932325:   65:	    __LO(x)  = 0;	/* return +-0 */
 24932325:   66:	    return x;
        -:   67:	} else {			/* fraction part in low x */
    #####:   68:	    i = ((unsigned)(0xffffffff))>>(j0-20);
    #####:   69:	    if((i1&i)==0) { 		/* x is integral */
branch  0 never executed
branch  1 never executed
    #####:   70:		*iptr = x;
    #####:   71:		__HI(x) &= 0x80000000;
    #####:   72:		__LO(x)  = 0;	/* return +-0 */
    #####:   73:		return x;
        -:   74:	    } else {
    #####:   75:		__HIp(iptr) = i0;
    #####:   76:		__LOp(iptr) = i1&(~i);
    #####:   77:		return x - *iptr;
        -:   78:	    }
        -:   79:	}
        -:   80:}
