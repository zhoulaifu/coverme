        -:    0:Source:foo.c
        -:    0:Graph:foo.gcno
        -:    0:Data:foo.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:
        -:    3:/* @(#)s_sin.c 1.3 95/01/18 */
        -:    4:/*
        -:    5: * ====================================================
        -:    6: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    7: *
        -:    8: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    9: * Permission to use, copy, modify, and distribute this
        -:   10: * software is freely granted, provided that this notice 
        -:   11: * is preserved.
        -:   12: * ====================================================
        -:   13: */
        -:   14:
        -:   15:/* sin(x)
        -:   16: * Return sine function of x.
        -:   17: *
        -:   18: * kernel function:
        -:   19: *	__kernel_sin		... sine function on [-pi/4,pi/4]
        -:   20: *	__kernel_cos		... cose function on [-pi/4,pi/4]
        -:   21: *	__ieee754_rem_pio2	... argument reduction routine
        -:   22: *
        -:   23: * Method.
        -:   24: *      Let S,C and T denote the sin, cos and tan respectively on 
        -:   25: *	[-PI/4, +PI/4]. Reduce the argument x to y1+y2 = x-k*pi/2 
        -:   26: *	in [-pi/4 , +pi/4], and let n = k mod 4.
        -:   27: *	We have
        -:   28: *
        -:   29: *          n        sin(x)      cos(x)        tan(x)
        -:   30: *     ----------------------------------------------------------
        -:   31: *	    0	       S	   C		 T
        -:   32: *	    1	       C	  -S		-1/T
        -:   33: *	    2	      -S	  -C		 T
        -:   34: *	    3	      -C	   S		-1/T
        -:   35: *     ----------------------------------------------------------
        -:   36: *
        -:   37: * Special cases:
        -:   38: *      Let trig be any of sin, cos, or tan.
        -:   39: *      trig(+-INF)  is NaN, with signals;
        -:   40: *      trig(NaN)    is that NaN;
        -:   41: *
        -:   42: * Accuracy:
        -:   43: *	TRIG(x) returns trig(x) nearly rounded 
        -:   44: */
        -:   45:#define __LITTLE_ENDIAN
        -:   46:
        -:   47:#include "fdlibm.h"
        -:   48:#include <stdio.h>
        -:   49:
function foo_raw called 1277 returned 100% blocks executed 83%
     1277:   50:	double foo_raw(double x)
        -:   51:{
     1277:   52:	double y[2],z=0.0;
        -:   53:	int n, ix;
        -:   54:        //        printf("******added something in s_sin.c so it can be reflected in  libm.a!\n");
        -:   55:    /* High word of x. */
     1277:   56:	ix = __HI(x);
        -:   57:        
        -:   58:    /* |x| ~< pi/4 */
     1277:   59:	ix &= 0x7fffffff;
     1277:   60:	if(ix <= 0x3fe921fb) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   61:          printf ("A1\n");
call    0 never executed
    #####:   62:          return __kernel_sin(x,z,0);
call    0 never executed
        -:   63:
        -:   64:        }
        -:   65:    /* sin(Inf or NaN) is NaN */
     1277:   66:	else if (ix>=0x7ff00000) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   67:          
    #####:   68:          printf ("   A2\n");
call    0 never executed
        -:   69:          
    #####:   70:          return x-x;
        -:   71:        }
        -:   72:    /* argument reduction needed */
        -:   73:	else {
        -:   74:         
        -:   75:        
        -:   76:
     1277:   77:	    n = __ieee754_rem_pio2(x,y);
call    0 returned 100%
     1277:   78:            printf ("  n = %d\n", n);
call    0 returned 100%
     1277:   79:            printf ("  n&3 = %d\n", n&3);
call    0 returned 100%
        -:   80:              //change this to reflect logic otherwise, 'return do not work'
     1277:   81:            if ((n&3)==0){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
      321:   82:              printf ("    A4\n");
call    0 returned 100%
      321:   83:              return  __kernel_sin(y[0],y[1],1);
call    0 returned 100%
        -:   84:            }
      956:   85:            else if ((n&3)==1){
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
      304:   86:              printf ("           A5\n");
call    0 returned 100%
      304:   87:              return  __kernel_cos(y[0],y[1]);
call    0 returned 100%
        -:   88:            }
      652:   89:            else if ((n&3) ==2){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
      328:   90:              printf ("                       A6\n");
call    0 returned 100%
      328:   91:              return -__kernel_sin(y[0],y[1],1);
call    0 returned 100%
        -:   92:            }
        -:   93:            else{
      324:   94:              printf ("                                     A7\n");
call    0 returned 100%
      324:   95:              return -__kernel_cos(y[0],y[1]);
call    0 returned 100%
        -:   96:            }
        -:   97:            /*original code uses 'switch'
        -:   98:	    switch(n&3) {
        -:   99:
        -:  100:            case 0: return  __kernel_sin(y[0],y[1],1);
        -:  101:		case 1: return  __kernel_cos(y[0],y[1]);
        -:  102:		case 2: return -__kernel_sin(y[0],y[1],1);
        -:  103:		default:
        -:  104:			return -__kernel_cos(y[0],y[1]);
        -:  105:	    }
        -:  106:            */
        -:  107:	}
        -:  108:}
        -:  109:
