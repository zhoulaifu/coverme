        -:    0:Source:foo.c
        -:    0:Graph:foo.gcno
        -:    0:Data:foo.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:/* @(#)e_exp.c 1.6 04/04/22 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Permission to use, copy, modify, and distribute this
        -:    8: * software is freely granted, provided that this notice 
        -:    9: * is preserved.
        -:   10: * ====================================================
        -:   11: */
        -:   12:
        -:   13:/* __ieee754_exp(x)
        -:   14: * Returns the exponential of x.
        -:   15: *
        -:   16: * Method
        -:   17: *   1. Argument reduction:
        -:   18: *      Reduce x to an r so that |r| <= 0.5*ln2 ~ 0.34658.
        -:   19: *	Given x, find r and integer k such that
        -:   20: *
        -:   21: *               x = k*ln2 + r,  |r| <= 0.5*ln2.  
        -:   22: *
        -:   23: *      Here r will be represented as r = hi-lo for better 
        -:   24: *	accuracy.
        -:   25: *
        -:   26: *   2. Approximation of exp(r) by a special rational function on
        -:   27: *	the interval [0,0.34658]:
        -:   28: *	Write
        -:   29: *	    R(r**2) = r*(exp(r)+1)/(exp(r)-1) = 2 + r*r/6 - r**4/360 + ...
        -:   30: *      We use a special Remes algorithm on [0,0.34658] to generate 
        -:   31: * 	a polynomial of degree 5 to approximate R. The maximum error 
        -:   32: *	of this polynomial approximation is bounded by 2**-59. In
        -:   33: *	other words,
        -:   34: *	    R(z) ~ 2.0 + P1*z + P2*z**2 + P3*z**3 + P4*z**4 + P5*z**5
        -:   35: *  	(where z=r*r, and the values of P1 to P5 are listed below)
        -:   36: *	and
        -:   37: *	    |                  5          |     -59
        -:   38: *	    | 2.0+P1*z+...+P5*z   -  R(z) | <= 2 
        -:   39: *	    |                             |
        -:   40: *	The computation of exp(r) thus becomes
        -:   41: *                             2*r
        -:   42: *		exp(r) = 1 + -------
        -:   43: *		              R - r
        -:   44: *                                 r*R1(r)	
        -:   45: *		       = 1 + r + ----------- (for better accuracy)
        -:   46: *		                  2 - R1(r)
        -:   47: *	where
        -:   48: *			         2       4             10
        -:   49: *		R1(r) = r - (P1*r  + P2*r  + ... + P5*r   ).
        -:   50: *	
        -:   51: *   3. Scale back to obtain exp(x):
        -:   52: *	From step 1, we have
        -:   53: *	   exp(x) = 2^k * exp(r)
        -:   54: *
        -:   55: * Special cases:
        -:   56: *	exp(INF) is INF, exp(NaN) is NaN;
        -:   57: *	exp(-INF) is 0, and
        -:   58: *	for finite argument, only exp(0)=1 is exact.
        -:   59: *
        -:   60: * Accuracy:
        -:   61: *	according to an error analysis, the error is always less than
        -:   62: *	1 ulp (unit in the last place).
        -:   63: *
        -:   64: * Misc. info.
        -:   65: *	For IEEE double 
        -:   66: *	    if x >  7.09782712893383973096e+02 then exp(x) overflow
        -:   67: *	    if x < -7.45133219101941108420e+02 then exp(x) underflow
        -:   68: *
        -:   69: * Constants:
        -:   70: * The hexadecimal values are the intended ones for the following 
        -:   71: * constants. The decimal values may be used, provided that the 
        -:   72: * compiler will convert from decimal to binary accurately enough
        -:   73: * to produce the hexadecimal values shown.
        -:   74: */
        -:   75:
        -:   76:#include "fdlibm.h"
        -:   77:
        -:   78:#ifdef __STDC__
        -:   79:static const double
        -:   80:#else
        -:   81:static double
        -:   82:#endif
        -:   83:one	= 1.0,
        -:   84:halF[2]	= {0.5,-0.5,},
        -:   85:huge	= 1.0e+300,
        -:   86:twom1000= 9.33263618503218878990e-302,     /* 2**-1000=0x01700000,0*/
        -:   87:o_threshold=  7.09782712893383973096e+02,  /* 0x40862E42, 0xFEFA39EF */
        -:   88:u_threshold= -7.45133219101941108420e+02,  /* 0xc0874910, 0xD52D3051 */
        -:   89:ln2HI[2]   ={ 6.93147180369123816490e-01,  /* 0x3fe62e42, 0xfee00000 */
        -:   90:	     -6.93147180369123816490e-01,},/* 0xbfe62e42, 0xfee00000 */
        -:   91:ln2LO[2]   ={ 1.90821492927058770002e-10,  /* 0x3dea39ef, 0x35793c76 */
        -:   92:	     -1.90821492927058770002e-10,},/* 0xbdea39ef, 0x35793c76 */
        -:   93:invln2 =  1.44269504088896338700e+00, /* 0x3ff71547, 0x652b82fe */
        -:   94:P1   =  1.66666666666666019037e-01, /* 0x3FC55555, 0x5555553E */
        -:   95:P2   = -2.77777777770155933842e-03, /* 0xBF66C16C, 0x16BEBD93 */
        -:   96:P3   =  6.61375632143793436117e-05, /* 0x3F11566A, 0xAF25DE2C */
        -:   97:P4   = -1.65339022054652515390e-06, /* 0xBEBBBD41, 0xC5D26BF1 */
        -:   98:P5   =  4.13813679705723846039e-08; /* 0x3E663769, 0x72BEA4D0 */
        -:   99:
        -:  100:
        -:  101:#ifdef __STDC__
function foo_raw called 69963448 returned 100% blocks executed 29%
 69963448:  102:	double foo_raw(double x)	/* default IEEE double exp */
        -:  103:#else
        -:  104:	double foo_raw(x)	/* default IEEE double exp */
        -:  105:	double x;
        -:  106:#endif
        -:  107:{
        -:  108:	double y,hi,lo,c,t;
        -:  109:	int k,xsb;
        -:  110:	unsigned hx;
        -:  111:
 69963448:  112:	hx  = __HI(x);	/* high word of x */
 69963448:  113:	xsb = (hx>>31)&1;		/* sign bit of x */
 69963448:  114:	hx &= 0x7fffffff;		/* high word of |x| */
        -:  115:
        -:  116:    /* filter out non-finite argument */
 69963448:  117:	if(hx >= 0x40862E42) {			/* if |x|>=709.78... */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
 69963448:  118:            if(hx>=0x7ff00000) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  119:		if(((hx&0xfffff)|__LO(x))!=0) 
branch  0 never executed
branch  1 never executed
    #####:  120:		     return x+x; 		/* NaN */
    #####:  121:		else return (xsb==0)? x:0.0;	/* exp(+-inf)={inf,0} */
branch  0 never executed
branch  1 never executed
        -:  122:	    }
 69963448:  123:	    if(x > o_threshold) return huge*huge; /* overflow */
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
 34978082:  124:	    if(x < u_threshold) return twom1000*twom1000; /* underflow */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  125:	}
        -:  126:
        -:  127:    /* argument reduction */
    #####:  128:	if(hx > 0x3fd62e42) {		/* if  |x| > 0.5 ln2 */ 
branch  0 never executed
branch  1 never executed
    #####:  129:	    if(hx < 0x3FF0A2B2) {	/* and |x| < 1.5 ln2 */
branch  0 never executed
branch  1 never executed
    #####:  130:		hi = x-ln2HI[xsb]; lo=ln2LO[xsb]; k = 1-xsb-xsb;
        -:  131:	    } else {
    #####:  132:		k  = (int)(invln2*x+halF[xsb]);
    #####:  133:		t  = k;
    #####:  134:		hi = x - t*ln2HI[0];	/* t*ln2HI is exact here */
    #####:  135:		lo = t*ln2LO[0];
        -:  136:	    }
    #####:  137:	    x  = hi - lo;
        -:  138:	} 
    #####:  139:	else if(hx < 0x3e300000)  {	/* when |x|<2**-28 */
branch  0 never executed
branch  1 never executed
    #####:  140:	    if(huge+x>one) return one+x;/* trigger inexact */
branch  0 never executed
branch  1 never executed
        -:  141:	}
    #####:  142:	else k = 0;
        -:  143:
        -:  144:    /* x is now in primary range */
    #####:  145:	t  = x*x;
    #####:  146:	c  = x - t*(P1+t*(P2+t*(P3+t*(P4+t*P5))));
    #####:  147:	if(k==0) 	return one-((x*c)/(c-2.0)-x); 
branch  0 never executed
branch  1 never executed
    #####:  148:	else 		y = one-((lo-(x*c)/(2.0-c))-hi);
    #####:  149:	if(k >= -1021) {
branch  0 never executed
branch  1 never executed
    #####:  150:	    __HI(y) += (k<<20);	/* add k to y's exponent */
    #####:  151:	    return y;
        -:  152:	} else {
    #####:  153:	    __HI(y) += ((k+1000)<<20);/* add k to y's exponent */
    #####:  154:	    return y*twom1000;
        -:  155:	}
        -:  156:}
