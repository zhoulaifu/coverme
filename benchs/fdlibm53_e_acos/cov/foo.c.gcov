        -:    0:Source:foo.c
        -:    0:Graph:foo.gcno
        -:    0:Data:foo.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:/* @(#)e_acos.c 1.3 95/01/18 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    8: * Permission to use, copy, modify, and distribute this
        -:    9: * software is freely granted, provided that this notice 
        -:   10: * is preserved.
        -:   11: * ====================================================
        -:   12: */
        -:   13:
        -:   14:/* __ieee754_acos(x)
        -:   15: * Method :                  
        -:   16: *	acos(x)  = pi/2 - asin(x)
        -:   17: *	acos(-x) = pi/2 + asin(x)
        -:   18: * For |x|<=0.5
        -:   19: *	acos(x) = pi/2 - (x + x*x^2*R(x^2))	(see asin.c)
        -:   20: * For x>0.5
        -:   21: * 	acos(x) = pi/2 - (pi/2 - 2asin(sqrt((1-x)/2)))
        -:   22: *		= 2asin(sqrt((1-x)/2))  
        -:   23: *		= 2s + 2s*z*R(z) 	...z=(1-x)/2, s=sqrt(z)
        -:   24: *		= 2f + (2c + 2s*z*R(z))
        -:   25: *     where f=hi part of s, and c = (z-f*f)/(s+f) is the correction term
        -:   26: *     for f so that f+c ~ sqrt(z).
        -:   27: * For x<-0.5
        -:   28: *	acos(x) = pi - 2asin(sqrt((1-|x|)/2))
        -:   29: *		= pi - 0.5*(s+s*z*R(z)), where z=(1-|x|)/2,s=sqrt(z)
        -:   30: *
        -:   31: * Special cases:
        -:   32: *	if x is NaN, return x itself;
        -:   33: *	if |x|>1, return NaN with invalid signal.
        -:   34: *
        -:   35: * Function needed: sqrt
        -:   36: */
        -:   37:
        -:   38:#include "fdlibm.h"
        -:   39:
        -:   40:#ifdef __STDC__
        -:   41:static const double 
        -:   42:#else
        -:   43:static double 
        -:   44:#endif
        -:   45:one=  1.00000000000000000000e+00, /* 0x3FF00000, 0x00000000 */
        -:   46:pi =  3.14159265358979311600e+00, /* 0x400921FB, 0x54442D18 */
        -:   47:pio2_hi =  1.57079632679489655800e+00, /* 0x3FF921FB, 0x54442D18 */
        -:   48:pio2_lo =  6.12323399573676603587e-17, /* 0x3C91A626, 0x33145C07 */
        -:   49:pS0 =  1.66666666666666657415e-01, /* 0x3FC55555, 0x55555555 */
        -:   50:pS1 = -3.25565818622400915405e-01, /* 0xBFD4D612, 0x03EB6F7D */
        -:   51:pS2 =  2.01212532134862925881e-01, /* 0x3FC9C155, 0x0E884455 */
        -:   52:pS3 = -4.00555345006794114027e-02, /* 0xBFA48228, 0xB5688F3B */
        -:   53:pS4 =  7.91534994289814532176e-04, /* 0x3F49EFE0, 0x7501B288 */
        -:   54:pS5 =  3.47933107596021167570e-05, /* 0x3F023DE1, 0x0DFDF709 */
        -:   55:qS1 = -2.40339491173441421878e+00, /* 0xC0033A27, 0x1C8A2D4B */
        -:   56:qS2 =  2.02094576023350569471e+00, /* 0x40002AE5, 0x9C598AC8 */
        -:   57:qS3 = -6.88283971605453293030e-01, /* 0xBFE6066C, 0x1B8D0159 */
        -:   58:qS4 =  7.70381505559019352791e-02; /* 0x3FB3B8C5, 0xB12E9282 */
        -:   59:
        -:   60:#ifdef __STDC__
function foo_raw called 67663737 returned 100% blocks executed 33%
 67663737:   61:	double foo_raw(double x)
        -:   62:#else
        -:   63:	double foo_raw(x)
        -:   64:	double x;
        -:   65:#endif
        -:   66:{
        -:   67:	double z,p,q,r,w,s,c,df;
        -:   68:	int hx,ix;
 67663737:   69:	hx = __HI(x);
 67663737:   70:	ix = hx&0x7fffffff;
 67663737:   71:	if(ix>=0x3ff00000) {	/* |x| >= 1 */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
 67663737:   72:	    if(((ix-0x3ff00000)|__LO(x))==0) {	/* |x|==1 */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   73:		if(hx>0) return 0.0;		/* acos(1) = 0  */
branch  0 never executed
branch  1 never executed
    #####:   74:		else return pi+2.0*pio2_lo;	/* acos(-1)= pi */
        -:   75:	    }
 67663737:   76:	    return (x-x)/(x-x);		/* acos(|x|>1) is NaN */
        -:   77:	}
    #####:   78:	if(ix<0x3fe00000) {	/* |x| < 0.5 */
branch  0 never executed
branch  1 never executed
    #####:   79:	    if(ix<=0x3c600000) return pio2_hi+pio2_lo;/*if|x|<2**-57*/
branch  0 never executed
branch  1 never executed
    #####:   80:	    z = x*x;
    #####:   81:	    p = z*(pS0+z*(pS1+z*(pS2+z*(pS3+z*(pS4+z*pS5)))));
    #####:   82:	    q = one+z*(qS1+z*(qS2+z*(qS3+z*qS4)));
    #####:   83:	    r = p/q;
    #####:   84:	    return pio2_hi - (x - (pio2_lo-x*r));
    #####:   85:	} else  if (hx<0) {		/* x < -0.5 */
branch  0 never executed
branch  1 never executed
    #####:   86:	    z = (one+x)*0.5;
    #####:   87:	    p = z*(pS0+z*(pS1+z*(pS2+z*(pS3+z*(pS4+z*pS5)))));
    #####:   88:	    q = one+z*(qS1+z*(qS2+z*(qS3+z*qS4)));
    #####:   89:	    s = sqrt(z);
    #####:   90:	    r = p/q;
    #####:   91:	    w = r*s-pio2_lo;
    #####:   92:	    return pi - 2.0*(s+w);
        -:   93:	} else {			/* x > 0.5 */
    #####:   94:	    z = (one-x)*0.5;
    #####:   95:	    s = sqrt(z);
    #####:   96:	    df = s;
    #####:   97:	    __LO(df) = 0;
    #####:   98:	    c  = (z-df*df)/(s+df);
    #####:   99:	    p = z*(pS0+z*(pS1+z*(pS2+z*(pS3+z*(pS4+z*pS5)))));
    #####:  100:	    q = one+z*(qS1+z*(qS2+z*(qS3+z*qS4)));
    #####:  101:	    r = p/q;
    #####:  102:	    w = r*s+c;
    #####:  103:	    return 2.0*(df+w);
        -:  104:	}
        -:  105:}
