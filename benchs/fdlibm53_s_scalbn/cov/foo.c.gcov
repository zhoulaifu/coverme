        -:    0:Source:foo.c
        -:    0:Graph:foo.gcno
        -:    0:Data:foo.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:/* @(#)s_scalbn.c 1.3 95/01/18 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    8: * Permission to use, copy, modify, and distribute this
        -:    9: * software is freely granted, provided that this notice 
        -:   10: * is preserved.
        -:   11: * ====================================================
        -:   12: */
        -:   13:
        -:   14:/* 
        -:   15: * scalbn (double x, int n)
        -:   16: * scalbn(x,n) returns x* 2**n  computed by  exponent  
        -:   17: * manipulation rather than by actually performing an 
        -:   18: * exponentiation or a multiplication.
        -:   19: */
        -:   20:
        -:   21:#include "fdlibm.h"
        -:   22:
        -:   23:#ifdef __STDC__
        -:   24:static const double
        -:   25:#else
        -:   26:static double
        -:   27:#endif
        -:   28:two54   =  1.80143985094819840000e+16, /* 0x43500000, 0x00000000 */
        -:   29:twom54  =  5.55111512312578270212e-17, /* 0x3C900000, 0x00000000 */
        -:   30:huge   = 1.0e+300,
        -:   31:tiny   = 1.0e-300;
        -:   32:
        -:   33:#ifdef __STDC__
function foo_raw called 106264057 returned 100% blocks executed 47%
106264057:   34:	double foo_raw (double x, int n)
        -:   35:#else
        -:   36:	double foo_raw (x,n)
        -:   37:	double x; int n;
        -:   38:#endif
        -:   39:{
        -:   40:	int  k,hx,lx;
106264057:   41:	hx = __HI(x);
106264057:   42:	lx = __LO(x);
106264057:   43:        k = (hx&0x7ff00000)>>20;		/* extract exponent */
106264057:   44:        if (k==0) {				/* 0 or subnormal x */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   45:            if ((lx|(hx&0x7fffffff))==0) return x; /* +-0 */
branch  0 never executed
branch  1 never executed
    #####:   46:	    x *= two54; 
    #####:   47:	    hx = __HI(x);
    #####:   48:	    k = ((hx&0x7ff00000)>>20) - 54; 
    #####:   49:            if (n< -50000) return tiny*x; 	/*underflow*/
branch  0 never executed
branch  1 never executed
        -:   50:	    }
106264057:   51:        if (k==0x7ff) return x+x;		/* NaN or Inf */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
106264057:   52:        k = k+n; 
106264057:   53:        if (k >  0x7fe) return huge*copysign(huge,x); /* overflow  */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
106264057:   54:        if (k > 0) 				/* normal result */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   55:	    {__HI(x) = (hx&0x800fffff)|(k<<20); return x;}
106264057:   56:        if (k <= -54)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
106264057:   57:            if (n > 50000) 	/* in case integer overflow in n+k */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   58:		return huge*copysign(huge,x);	/*overflow*/
106264057:   59:	    else return tiny*copysign(tiny,x); 	/*underflow*/
    #####:   60:        k += 54;				/* subnormal result */
    #####:   61:        __HI(x) = (hx&0x800fffff)|(k<<20);
    #####:   62:        return x*twom54;
        -:   63:}
