        -:    0:Source:foo.c
        -:    0:Graph:foo.gcno
        -:    0:Data:foo.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:/* @(#)s_tanh.c 1.3 95/01/18 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    8: * Permission to use, copy, modify, and distribute this
        -:    9: * software is freely granted, provided that this notice 
        -:   10: * is preserved.
        -:   11: * ====================================================
        -:   12: */
        -:   13:
        -:   14:/* Tanh(x)
        -:   15: * Return the Hyperbolic Tangent of x
        -:   16: *
        -:   17: * Method :
        -:   18: *				       x    -x
        -:   19: *				      e  - e
        -:   20: *	0. tanh(x) is defined to be -----------
        -:   21: *				       x    -x
        -:   22: *				      e  + e
        -:   23: *	1. reduce x to non-negative by tanh(-x) = -tanh(x).
        -:   24: *	2.  0      <= x <= 2**-55 : tanh(x) := x*(one+x)
        -:   25: *					        -t
        -:   26: *	    2**-55 <  x <=  1     : tanh(x) := -----; t = expm1(-2x)
        -:   27: *					       t + 2
        -:   28: *						     2
        -:   29: *	    1      <= x <=  22.0  : tanh(x) := 1-  ----- ; t=expm1(2x)
        -:   30: *						   t + 2
        -:   31: *	    22.0   <  x <= INF    : tanh(x) := 1.
        -:   32: *
        -:   33: * Special cases:
        -:   34: *	tanh(NaN) is NaN;
        -:   35: *	only tanh(0)=0 is exact for finite argument.
        -:   36: */
        -:   37:
        -:   38:#include "fdlibm.h"
        -:   39:
        -:   40:#ifdef __STDC__
        -:   41:static const double one=1.0, two=2.0, tiny = 1.0e-300;
        -:   42:#else
        -:   43:static double one=1.0, two=2.0, tiny = 1.0e-300;
        -:   44:#endif
        -:   45:
        -:   46:#ifdef __STDC__
function foo_raw called 3905400 returned 100% blocks executed 47%
  3905400:   47:	double foo_raw(double x)
        -:   48:#else
        -:   49:	double foo_raw(x)
        -:   50:	double x;
        -:   51:#endif
        -:   52:{
        -:   53:	double t,z;
        -:   54:	int jx,ix;
        -:   55:
        -:   56:    /* High word of |x|. */
  3905400:   57:	jx = __HI(x);
  3905400:   58:	ix = jx&0x7fffffff;
        -:   59:
        -:   60:    /* x is INF or NaN */
  3905400:   61:	if(ix>=0x7ff00000) { 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   62:	    if (jx>=0) return one/x+one;    /* tanh(+-inf)=+-1 */
branch  0 never executed
branch  1 never executed
    #####:   63:	    else       return one/x-one;    /* tanh(NaN) = NaN */
        -:   64:	}
        -:   65:
        -:   66:    /* |x| < 22 */
  3905400:   67:	if (ix < 0x40360000) {		/* |x|<22 */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   68:	    if (ix<0x3c800000) 		/* |x|<2**-55 */
branch  0 never executed
branch  1 never executed
    #####:   69:		return x*(one+x);    	/* tanh(small) = small */
    #####:   70:	    if (ix>=0x3ff00000) {	/* |x|>=1  */
branch  0 never executed
branch  1 never executed
    #####:   71:		t = expm1(two*fabs(x));
    #####:   72:		z = one - two/(t+two);
        -:   73:	    } else {
    #####:   74:	        t = expm1(-two*fabs(x));
    #####:   75:	        z= -t/(t+two);
        -:   76:	    }
        -:   77:    /* |x| > 22, return +-1 */
        -:   78:	} else {
  3905400:   79:	    z = one - tiny;		/* raised inexact flag */
        -:   80:	}
  3905400:   81:	return (jx>=0)? z: -z;
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   82:}
