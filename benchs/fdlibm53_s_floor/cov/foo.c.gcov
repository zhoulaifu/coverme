        -:    0:Source:foo.c
        -:    0:Graph:foo.gcno
        -:    0:Data:foo.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:/* @(#)s_floor.c 1.3 95/01/18 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    8: * Permission to use, copy, modify, and distribute this
        -:    9: * software is freely granted, provided that this notice 
        -:   10: * is preserved.
        -:   11: * ====================================================
        -:   12: */
        -:   13:
        -:   14:/*
        -:   15: * floor(x)
        -:   16: * Return x rounded toward -inf to integral value
        -:   17: * Method:
        -:   18: *	Bit twiddling.
        -:   19: * Exception:
        -:   20: *	Inexact flag raised if x not equal to floor(x).
        -:   21: */
        -:   22:
        -:   23:#include "fdlibm.h"
        -:   24:#define __LITTLE_ENDIAN
        -:   25:#include "stdio.h"
        -:   26:
        -:   27:
        -:   28:#ifdef __STDC__
        -:   29:static const double huge = 1.0e300;
        -:   30:#else
        -:   31:static double huge = 1.0e300;
        -:   32:#endif
        -:   33:
function foo_raw called 78240602 returned 100% blocks executed 16%
 78240602:   34:double foo_raw(double x){
        -:   35:	int i0,i1,j0;
        -:   36:	unsigned i,j;
 78240602:   37:	i0 =  __HI(x);
 78240602:   38:	i1 =  __LO(x);
 78240602:   39:	j0 = ((i0>>20)&0x7ff)-0x3ff;
 78240602:   40:	if(j0<20) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   41:	    if(j0<0) { 	/* raise inexact if x != 0 */
branch  0 never executed
branch  1 never executed
    #####:   42:		if(huge+x>0.0) {/* return 0*sign(x) if |x|<1 */
branch  0 never executed
branch  1 never executed
    #####:   43:		    if(i0>=0) {i0=i1=0;} 
branch  0 never executed
branch  1 never executed
    #####:   44:		    else if(((i0&0x7fffffff)|i1)!=0)
branch  0 never executed
branch  1 never executed
    #####:   45:			{ i0=0xbff00000;i1=0;}
        -:   46:		}
        -:   47:	    } else {
    #####:   48:		i = (0x000fffff)>>j0;
    #####:   49:		if(((i0&i)|i1)==0) return x; /* x is integral */
branch  0 never executed
branch  1 never executed
    #####:   50:		if(huge+x>0.0) {	/* raise inexact flag */
branch  0 never executed
branch  1 never executed
    #####:   51:		    if(i0<0) i0 += (0x00100000)>>j0;
branch  0 never executed
branch  1 never executed
    #####:   52:		    i0 &= (~i); i1=0;
        -:   53:		}
        -:   54:	    }
 78240602:   55:	} else if (j0>51) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
 78240602:   56:	    if(j0==0x400) return x+x;	/* inf or NaN */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
 78240602:   57:	    else return x;		/* x is integral */
        -:   58:	} else {
    #####:   59:	    i = ((unsigned)(0xffffffff))>>(j0-20);
    #####:   60:	    if((i1&i)==0) return x;	/* x is integral */
branch  0 never executed
branch  1 never executed
    #####:   61:	    if(huge+x>0.0) { 		/* raise inexact flag */
branch  0 never executed
branch  1 never executed
    #####:   62:		if(i0<0) {
branch  0 never executed
branch  1 never executed
    #####:   63:		    if(j0==20) i0+=1; 
branch  0 never executed
branch  1 never executed
        -:   64:		    else {
    #####:   65:			j = i1+(1<<(52-j0));
    #####:   66:			if(j<i1) i0 +=1 ; 	/* got a carry */
branch  0 never executed
branch  1 never executed
    #####:   67:			i1=j;
        -:   68:		    }
        -:   69:		}
    #####:   70:		i1 &= (~i);
        -:   71:	    }
        -:   72:	}
    #####:   73:	__HI(x) = i0;
    #####:   74:	__LO(x) = i1;
    #####:   75:	return x;
        -:   76:}
