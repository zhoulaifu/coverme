        -:    0:Source:foo.c
        -:    0:Graph:foo.gcno
        -:    0:Data:foo.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:/* @(#)s_tan.c 1.3 95/01/18 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    8: * Permission to use, copy, modify, and distribute this
        -:    9: * software is freely granted, provided that this notice 
        -:   10: * is preserved.
        -:   11: * ====================================================
        -:   12: */
        -:   13:
        -:   14:/* tan(x)
        -:   15: * Return tangent function of x.
        -:   16: *
        -:   17: * kernel function:
        -:   18: *	__kernel_tan		... tangent function on [-pi/4,pi/4]
        -:   19: *	__ieee754_rem_pio2	... argument reduction routine
        -:   20: *
        -:   21: * Method.
        -:   22: *      Let S,C and T denote the sin, cos and tan respectively on 
        -:   23: *	[-PI/4, +PI/4]. Reduce the argument x to y1+y2 = x-k*pi/2 
        -:   24: *	in [-pi/4 , +pi/4], and let n = k mod 4.
        -:   25: *	We have
        -:   26: *
        -:   27: *          n        sin(x)      cos(x)        tan(x)
        -:   28: *     ----------------------------------------------------------
        -:   29: *	    0	       S	   C		 T
        -:   30: *	    1	       C	  -S		-1/T
        -:   31: *	    2	      -S	  -C		 T
        -:   32: *	    3	      -C	   S		-1/T
        -:   33: *     ----------------------------------------------------------
        -:   34: *
        -:   35: * Special cases:
        -:   36: *      Let trig be any of sin, cos, or tan.
        -:   37: *      trig(+-INF)  is NaN, with signals;
        -:   38: *      trig(NaN)    is that NaN;
        -:   39: *
        -:   40: * Accuracy:
        -:   41: *	TRIG(x) returns trig(x) nearly rounded 
        -:   42: */
        -:   43:
        -:   44:#include "fdlibm.h"
        -:   45:
        -:   46:#ifdef __STDC__
function foo_raw called 548589 returned 100% blocks executed 75%
   548589:   47:	double foo_raw(double x)
        -:   48:#else
        -:   49:	double foo_raw(x)
        -:   50:	double x;
        -:   51:#endif
        -:   52:{
   548589:   53:	double y[2],z=0.0;
        -:   54:	int n, ix;
        -:   55:
        -:   56:    /* High word of x. */
   548589:   57:	ix = __HI(x);
        -:   58:
        -:   59:    /* |x| ~< pi/4 */
   548589:   60:	ix &= 0x7fffffff;
   548589:   61:	if(ix <= 0x3fe921fb) return __kernel_tan(x,z,1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   62:
        -:   63:    /* tan(Inf or NaN) is NaN */
   548589:   64:	else if (ix>=0x7ff00000) return x-x;		/* NaN */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   65:
        -:   66:    /* argument reduction needed */
        -:   67:	else {
   548589:   68:	    n = __ieee754_rem_pio2(x,y);
call    0 returned 100%
   548589:   69:	    return __kernel_tan(y[0],y[1],1-((n&1)<<1)); /*   1 -- n even
call    0 returned 100%
        -:   70:							-1 -- n odd */
        -:   71:	}
        -:   72:}
