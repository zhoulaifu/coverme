        -:    0:Source:foo.c
        -:    0:Graph:foo.gcno
        -:    0:Data:foo.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:/* @(#)s_atan.c 1.3 95/01/18 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    8: * Permission to use, copy, modify, and distribute this
        -:    9: * software is freely granted, provided that this notice 
        -:   10: * is preserved.
        -:   11: * ====================================================
        -:   12: *
        -:   13: */
        -:   14:
        -:   15:/* atan(x)
        -:   16: * Method
        -:   17: *   1. Reduce x to positive by atan(x) = -atan(-x).
        -:   18: *   2. According to the integer k=4t+0.25 chopped, t=x, the argument
        -:   19: *      is further reduced to one of the following intervals and the
        -:   20: *      arctangent of t is evaluated by the corresponding formula:
        -:   21: *
        -:   22: *      [0,7/16]      atan(x) = t-t^3*(a1+t^2*(a2+...(a10+t^2*a11)...)
        -:   23: *      [7/16,11/16]  atan(x) = atan(1/2) + atan( (t-0.5)/(1+t/2) )
        -:   24: *      [11/16.19/16] atan(x) = atan( 1 ) + atan( (t-1)/(1+t) )
        -:   25: *      [19/16,39/16] atan(x) = atan(3/2) + atan( (t-1.5)/(1+1.5t) )
        -:   26: *      [39/16,INF]   atan(x) = atan(INF) + atan( -1/t )
        -:   27: *
        -:   28: * Constants:
        -:   29: * The hexadecimal values are the intended ones for the following 
        -:   30: * constants. The decimal values may be used, provided that the 
        -:   31: * compiler will convert from decimal to binary accurately enough 
        -:   32: * to produce the hexadecimal values shown.
        -:   33: */
        -:   34:
        -:   35:#include "fdlibm.h"
        -:   36:
        -:   37:#ifdef __STDC__
        -:   38:static const double atanhi[] = {
        -:   39:#else
        -:   40:static double atanhi[] = {
        -:   41:#endif
        -:   42:  4.63647609000806093515e-01, /* atan(0.5)hi 0x3FDDAC67, 0x0561BB4F */
        -:   43:  7.85398163397448278999e-01, /* atan(1.0)hi 0x3FE921FB, 0x54442D18 */
        -:   44:  9.82793723247329054082e-01, /* atan(1.5)hi 0x3FEF730B, 0xD281F69B */
        -:   45:  1.57079632679489655800e+00, /* atan(inf)hi 0x3FF921FB, 0x54442D18 */
        -:   46:};
        -:   47:
        -:   48:#ifdef __STDC__
        -:   49:static const double atanlo[] = {
        -:   50:#else
        -:   51:static double atanlo[] = {
        -:   52:#endif
        -:   53:  2.26987774529616870924e-17, /* atan(0.5)lo 0x3C7A2B7F, 0x222F65E2 */
        -:   54:  3.06161699786838301793e-17, /* atan(1.0)lo 0x3C81A626, 0x33145C07 */
        -:   55:  1.39033110312309984516e-17, /* atan(1.5)lo 0x3C700788, 0x7AF0CBBD */
        -:   56:  6.12323399573676603587e-17, /* atan(inf)lo 0x3C91A626, 0x33145C07 */
        -:   57:};
        -:   58:
        -:   59:#ifdef __STDC__
        -:   60:static const double aT[] = {
        -:   61:#else
        -:   62:static double aT[] = {
        -:   63:#endif
        -:   64:  3.33333333333329318027e-01, /* 0x3FD55555, 0x5555550D */
        -:   65: -1.99999999998764832476e-01, /* 0xBFC99999, 0x9998EBC4 */
        -:   66:  1.42857142725034663711e-01, /* 0x3FC24924, 0x920083FF */
        -:   67: -1.11111104054623557880e-01, /* 0xBFBC71C6, 0xFE231671 */
        -:   68:  9.09088713343650656196e-02, /* 0x3FB745CD, 0xC54C206E */
        -:   69: -7.69187620504482999495e-02, /* 0xBFB3B0F2, 0xAF749A6D */
        -:   70:  6.66107313738753120669e-02, /* 0x3FB10D66, 0xA0D03D51 */
        -:   71: -5.83357013379057348645e-02, /* 0xBFADDE2D, 0x52DEFD9A */
        -:   72:  4.97687799461593236017e-02, /* 0x3FA97B4B, 0x24760DEB */
        -:   73: -3.65315727442169155270e-02, /* 0xBFA2B444, 0x2C6A6C2F */
        -:   74:  1.62858201153657823623e-02, /* 0x3F90AD3A, 0xE322DA11 */
        -:   75:};
        -:   76:
        -:   77:#ifdef __STDC__
        -:   78:	static const double 
        -:   79:#else
        -:   80:	static double 
        -:   81:#endif
        -:   82:one   = 1.0,
        -:   83:huge   = 1.0e300;
        -:   84:
        -:   85:#ifdef __STDC__
function foo_raw called 70252489 returned 100% blocks executed 25%
 70252489:   86:	double foo_raw(double x)
        -:   87:#else
        -:   88:	double foo_raw(x)
        -:   89:	double x;
        -:   90:#endif
        -:   91:{
        -:   92:	double w,s1,s2,z;
        -:   93:	int ix,hx,id;
        -:   94:
 70252489:   95:	hx = __HI(x);
 70252489:   96:	ix = hx&0x7fffffff;
 70252489:   97:	if(ix>=0x44100000) {	/* if |x| >= 2^66 */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
 70252489:   98:	    if(ix>0x7ff00000||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   99:		(ix==0x7ff00000&&(__LO(x)!=0)))
branch  0 never executed
branch  1 never executed
    #####:  100:		return x+x;		/* NaN */
 70252489:  101:	    if(hx>0) return  atanhi[3]+atanlo[3];
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
 35122774:  102:	    else     return -atanhi[3]-atanlo[3];
    #####:  103:	} if (ix < 0x3fdc0000) {	/* |x| < 0.4375 */
branch  0 never executed
branch  1 never executed
    #####:  104:	    if (ix < 0x3e200000) {	/* |x| < 2^-29 */
branch  0 never executed
branch  1 never executed
    #####:  105:		if(huge+x>one) return x;	/* raise inexact */
branch  0 never executed
branch  1 never executed
        -:  106:	    }
    #####:  107:	    id = -1;
        -:  108:	} else {
    #####:  109:	x = fabs(x);
    #####:  110:	if (ix < 0x3ff30000) {		/* |x| < 1.1875 */
branch  0 never executed
branch  1 never executed
    #####:  111:	    if (ix < 0x3fe60000) {	/* 7/16 <=|x|<11/16 */
branch  0 never executed
branch  1 never executed
    #####:  112:		id = 0; x = (2.0*x-one)/(2.0+x); 
        -:  113:	    } else {			/* 11/16<=|x|< 19/16 */
    #####:  114:		id = 1; x  = (x-one)/(x+one); 
        -:  115:	    }
        -:  116:	} else {
    #####:  117:	    if (ix < 0x40038000) {	/* |x| < 2.4375 */
branch  0 never executed
branch  1 never executed
    #####:  118:		id = 2; x  = (x-1.5)/(one+1.5*x);
        -:  119:	    } else {			/* 2.4375 <= |x| < 2^66 */
    #####:  120:		id = 3; x  = -1.0/x;
        -:  121:	    }
        -:  122:	}}
        -:  123:    /* end of argument reduction */
    #####:  124:	z = x*x;
    #####:  125:	w = z*z;
        -:  126:    /* break sum from i=0 to 10 aT[i]z**(i+1) into odd and even poly */
    #####:  127:	s1 = z*(aT[0]+w*(aT[2]+w*(aT[4]+w*(aT[6]+w*(aT[8]+w*aT[10])))));
    #####:  128:	s2 = w*(aT[1]+w*(aT[3]+w*(aT[5]+w*(aT[7]+w*aT[9]))));
    #####:  129:	if (id<0) return x - x*(s1+s2);
branch  0 never executed
branch  1 never executed
        -:  130:	else {
    #####:  131:	    z = atanhi[id] - ((x*(s1+s2) - atanlo[id]) - x);
    #####:  132:	    return (hx<0)? -z:z;
branch  0 never executed
branch  1 never executed
        -:  133:	}
        -:  134:}
